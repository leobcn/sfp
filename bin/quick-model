#!/usr/bin/env python

import os
import random
random.seed(os.urandom(16))

import numpy as np
from numpy import linalg


def Graph(level=25, only_absorb_at_max=False):

    def randE(max_nodes_per_level, max_edges_per_node, max_levels, only_absorb_at_max):
        E = set()
        levels = [[0]]
        u = 1
        for _ in xrange(1, max_levels+1):
            level = list()
            for _ in xrange(random.randint(1, max_nodes_per_level)):
                level.append(u)
                u += 1
            levels.append(level)
        for l in xrange(len(levels)-1):
            srcs = levels[l]
            targs = levels[l+1]
            used_srcs = set()
            used_targs = set()
            for u in srcs:
                for _ in xrange(random.randint(0, max_edges_per_node)):
                    v = random.choice(targs)
                    E.add((u,v))
                    used_srcs.add(u)
                    used_targs.add(v)
            if len(used_srcs) <= 0:
                used_srcs.add(srcs[0])
            used_srcs = list(used_srcs)
            for v in set(targs) - used_targs:
                u = random.choice(used_srcs)
                E.add((u,v))
            if only_absorb_at_max:
                for u in (set(srcs) - set(used_srcs)):
                    v = random.choice(targs)
                    E.add((u,v))
        return sorted(list(E))

    E = randE(15, 4, level, only_absorb_at_max)

    s = set(e[0] for e in E)
    t = set(e[1] for e in E)
    V = s | t
    A = t - s
    T = V - A

    V = sorted(list(V))
    A = sorted(list(A))
    T = sorted(list(T))

    #print "E", E
    #print "V", V
    #print "A", A
    #print "T", T

    parents = [
        [i for i, j in E if u == j]
        for u in V
    ]

    kids = [
        [j for i, j in E if u == i]
        for u in V
    ]

    level = np.zeros((len(V),))
    for u in V:
        if u == 0:
            level[u] = 0
        else:
            level[u] = level[parents[u][0]] + 1
    max_level = level[-1]

    TE = list()
    discovered = set([0])
    for i, j in E:
        if j in discovered: continue
        discovered.add(j)
        TE.append((i,j))

    tparents = [
        [i for i, j in TE if u == j]
        for u in V
    ]

    tkids = [
        [j for i, j in TE if u == i]
        for u in V
    ]
    #print 'tree edges', TE
    #print 'tree kids', tkids
    #print 'tree parents', tparents

    #print "kids", kids
    #print "parents", parents
    #print "level", level

    def connected(i, j):
        return (i,j) in E

    def tree_connected(i, j):
        return (i,j) in TE

    def common_ancestor(i, j):
        if level[i] > level[j]:
            t = i
            i = j
            j = t
        istack = set([i])
        jstack = set([j])
        while level[list(jstack)[0]] > level[i]:
            njstack = set()
            for v in jstack:
                for p in parents[v]:
                    njstack.add(p)
            jstack = njstack
        while len(istack & jstack) <= 0:
            #print istack, jstack
            nistack = set()
            njstack = set()
            for v in istack:
                for p in parents[v]:
                    nistack.add(p)
            for v in jstack:
                for p in parents[v]:
                    njstack.add(p)
            istack = nistack
            jstack = njstack
            if len(istack) == 0 or len(jstack) == 0:
                return None
        return (istack & jstack).pop()

    def absorbing(v, kids):
        stack = [v]
        seen = set()
        absorbing = list()
        while len(stack) > 0:
            u = stack.pop()
            seen.add(u)
            if u in A:
                absorbing.append(u)
            for kid in kids[u]:
                if kid not in seen:
                    stack.append(kid)
        return absorbing

    def walk(v, kids):
        def transition(c):
            if len(kids[c]) > 0:
                return random.choice(kids[c])
            return None
        c = v
        n = transition(c)
        path = [c]
        while n is not None:
            c = n
            n = transition(c)
            path.append(c)
        return path

    def total_area(v, kids):
        stack = [v]
        seen = set()
        while len(stack) > 0:
            u = stack.pop()
            seen.add(u)
            for kid in kids[u]:
                if kid not in seen:
                    stack.append(kid)
        return sorted(list(seen))

    def estimate_area_walk(v, kids, walks=5):
        nodes = set()
        for _ in xrange(walks):
            for n in walk(v, kids):
                nodes.add(n)
                for k in kids[n]:
                    nodes.add(k)
        return sorted(list(nodes))

    def estimate_depth_diameter(v, kids, walks=5):
        mp = 0
        mt = None
        tails = set()
        for _ in xrange(walks):
            p = walk(v, kids)
            tails.add(p[-1])
            if len(p) > mp:
                mp = len(p)
                mt = p[-1]
        tails = sorted(list(tails))
        anc = tails[0]
        #print tails
        for t in tails[1:]:
            #print v, t, anc, common_ancestor(anc, t)
            anc = common_ancestor(anc, t)
        diameter = (level[mt] - level[anc])
        return float(mp), float(diameter)

    def estimate_area(v, kids, limit=5):
        def uniform(v):
            return random.random()
        def size_random(v):
            return (1.0/float(level[v]))*random.random()
        def kids_random(v):
            if len(kids[v]) > 0:
                return (1.0/float(len(kids[v])))*random.random()
            return 1.0
        def level_random(v):
            return float(level[v])/random.random()
        def score(v):
            return level_random(v)
        def argsel(items, score, better):
            idx = 0
            for i in xrange(1, len(items)):
                if better(score(items[idx]), score(items[i])):
                    idx = i
            return idx
        def argmin(items, score):
            return argsel(items, score, lambda a, b: a > b)
        def argmax(items, score):
            return argsel(items, score, lambda a, b: a < b)
        def take(stack):
            idx = argmax(stack, score)
            u = stack[idx]
            del stack[idx]
            return u
        def push(stack, item):
            stack.append(item)
            while len(stack) > limit:
                drop(stack)
        def drop(stack):
            idx = argmin(stack, score)
            del stack[idx]
        stack = [v]
        seen = set()
        while len(stack) > 0:
            u = take(stack)
            seen.add(u)
            for kid in kids[u]:
                if kid not in seen:
                    push(stack, kid)
        return sorted(list(seen))

    def density(v):
        return len(absorbing(v, kids))

    def tree_density(v):
        len(absorbing(v, tkids))
        return len(absorbing(v, tkids))

    def urw(i, j):
        if connected(i, j):
            return 1.0/len(kids[i])
        elif i == j and i in A:
            return 1.0
        else:
            return 0.0

    def unisorb(i, j):
        def weight(v):
            return float(tree_density(v))
        if tree_connected(i, j) and weight(j) > 0:
            return (weight(j) / sum(weight(kid) for kid in tkids[i]))
        elif i == j and len(kids[i]) == 0:
            return 1.0
        else:
            return 0.0

    def fastmax(i, j):
        M = float(max_level)
        def weight(v):
            if v not in A:
                return float(len(kids[v]))/(float(len(parents[v])))
            else:
                return float(level[v])/(M*float(len(parents[v])))
        #if i == j and len(kids[i]) > 0:
            #return 1.0/M
        if connected(i, j) and weight(j) > 0:
            #return ((M - 1.0)/M) * (weight(j) / sum(weight(kid) for kid in kids[i]))
            return (weight(j) / sum(weight(kid) for kid in kids[i]))
        elif i == j and len(kids[i]) == 0:
            return 1.0
        else:
            return 0.0

    fm2_ests = dict()
    def fastmax2(i, j):
        K = tkids
        M = float(max_level)
        def weight(v):
            if v in fm2_ests:
                return fm2_ests[v]
            if v not in A:
                w = max(M-level[v], 2.0)
                walks = int(np.log(w)*(w**2))
                area = estimate_area_walk(v, K, walks=walks)
                total = float(len(area))
                absor = float(len([n for n in area if n in A]))
                trans = float(len([n for n in area if n in T]))
                est = absor
                fm2_ests[v] = est
                return est
            else:
                return 1.0
        if j in K[i] and weight(j) > 0:
            return (weight(j) / sum(weight(kid) for kid in K[i]))
        elif i == j and len(kids[i]) == 0:
            return 1.0
        else:
            return 0.0

    uniprox_ests = dict()
    def uniprox(i, j):
        K = tkids
        M = float(max_level)
        def weight(v):
            if v in uniprox_ests:
                return uniprox_ests[v]
            if v not in A:
                walks = int(max(M/4.5, 5))
                depth, diameter = estimate_depth_diameter(v, K, walks=walks)
                est = depth*max(diameter, 1)
                uniprox_ests[v] = est
                return est
            else:
                return 1.0
                #return float(level[v])/(M*float(len(parents[v])))
                #return float(level[v])/M
        if j in K[i] and weight(j) > 0:
            return (weight(j) / sum(weight(kid) for kid in K[i]))
        elif i == j and len(kids[i]) == 0:
            return 1.0
        else:
            return 0.0

    #C = np.mean([len(x) for x in kids])
    def musk(i, j):
        def weight(u, v):
            umax = u in A
            vmax = v in A
            udeg = float(len(kids[u]) + len(parents[u]))
            vdeg = float(len(kids[v]) + len(parents[v]))
            if umax and vmax:
                return 0.0
            elif not umax and vmax:
                return 1.0/vdeg
            elif umax and not vmax:
                return 1.0/udeg
            else:
                return 1.0
        if i == j and i in A and level[i] == level[-1]:
            return 1.0
        elif (connected(i, j) or connected(j, i)) and not (i in A and level[i] == level[-1]):
            return (weight(i, j) / sum(weight(i, x)
                                       for x in kids[i] + parents[i]))
        else:
            return 0.0

    return T, A, {
        'urw': urw,
        'unisorb': unisorb,
        'fastmax': fastmax,
        'fastmax2': fastmax2,
        'uniprox': uniprox,
        'musk': musk,
    }

def QRN(T, A, pr):
    Q = np.zeros((len(T), len(T)))
    R = np.zeros((len(T), len(A)))
    for i, u in enumerate(T):
        for j, v in enumerate(T):
            Q[i,j] = pr(u,v)
    for i, u in enumerate(T):
        for j, v in enumerate(A):
            R[i,j] = pr(u,v)
    I = np.eye(len(T))
    N = linalg.inv(I - Q)
    return Q, R, N

def stats(T, A, pr):
    Q, R, N = QRN(T, A, pr)
    prs = N.dot(R)[0,:]
    times = N.dot(np.ones((N.shape[0],)))
    expected = 1.0/float(len(prs))
    stderr = round(np.sqrt(sum((p - expected)**2 for p in prs)), 10)
    #print A
    #print list(prs)
    return { 'time':times[0],
        'max':max(prs),
        'min':min(prs),
        'log(min)':np.log(min(prs)) if min(prs) > 0 else np.log(10e-7),
        'stderr':stderr,
        'stddev':np.std(prs*100)
    }

## for level in [10, 25, 50, 75, 100]:
##     T, A, prs = Graph(level=level, only_absorb_at_max=True)
##     print level, stats(T, A, prs['musk'])['time']

def compare():
    def pvals(data, stat_name, a, b):
        from scipy import stats
        A = list()
        B = list()
        for row in data:
            A.append(row[a][stat_name])
            B.append(row[b][stat_name])
        _, pval = stats.ttest_rel(A, B)
        print 'ttest-rel', 'for', stat_name, 'between', a, b, 'result', pval
        #_, pval = stats.ttest_ind(A, B)
        #print 'ttest', 'for', stat_name, 'between', a, b, 'result', pval
    import matplotlib.pyplot as plt
    import seaborn as sns
    import pandas as pd
    data = list()
    for _ in xrange(50):
        T, A, prs = Graph(level=75)
        d = {
            'urw': stats(T, A, prs['urw']),
            'fastmax': stats(T, A, prs['fastmax']),
            'uniprox': stats(T, A, prs['uniprox']),
            'fastmax2': stats(T, A, prs['fastmax2']),
            'unisorb': stats(T, A, prs['unisorb']),
        }
        data.append(d)
        print d
    data = sorted(data, key=lambda x: x['uniprox']['stderr'])

    stat_names = sorted(data[0]['urw'].keys())
    records = list()
    for i, line in enumerate(data):
        for gn, group in line.iteritems():
            row = list()
            row.append(i)
            row.append(gn)
            for sn in stat_names:
                row.append(group[sn])
            records.append(row)

    df = pd.DataFrame(records, columns=(['graph', 'chain'] + stat_names))

    g = sns.pairplot(df, aspect=3.5,
            hue="chain", x_vars='graph', y_vars=stat_names)
    g.savefig("/tmp/fig.png")

    print
    groups = data[0].keys()
    for sn in stat_names:
        for i, a in enumerate(groups):
            for b in groups[i+1:]:
                pvals(data, sn, a, b)
        print

#T, A, prs = Graph(level=50)
#print stats(T, A, prs['fastmax2'])

compare()

