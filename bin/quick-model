#!/usr/bin/env python

import os
import random
random.seed(os.urandom(16))

import numpy as np
from numpy import linalg
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd


def Graph():

    def randE(max_nodes_per_level, max_edges_per_node, max_levels, only_absorb_at_max):
        E = set()
        levels = [[0]]
        u = 1
        for _ in xrange(1, max_levels+1):
            level = list()
            for _ in xrange(random.randint(1, max_nodes_per_level)):
                level.append(u)
                u += 1
            levels.append(level)
        for l in xrange(len(levels)-1):
            srcs = levels[l]
            targs = levels[l+1]
            used_srcs = set()
            used_targs = set()
            for u in srcs:
                for _ in xrange(random.randint(0, max_edges_per_node)):
                    v = random.choice(targs)
                    E.add((u,v))
                    used_srcs.add(u)
                    used_targs.add(v)
            if len(used_srcs) <= 0:
                used_srcs.add(srcs[0])
            used_srcs = list(used_srcs)
            for v in set(targs) - used_targs:
                u = random.choice(used_srcs)
                E.add((u,v))
            if only_absorb_at_max:
                for u in (set(srcs) - set(used_srcs)):
                    v = random.choice(targs)
                    E.add((u,v))
        return sorted(list(E))

    E = randE(15, 4, 50, False)

    s = set(e[0] for e in E)
    t = set(e[1] for e in E)
    V = s | t
    A = t - s
    T = V - A

    V = sorted(list(V))
    A = sorted(list(A))
    T = sorted(list(T))

    #print "E", E
    #print "V", V
    #print "A", A
    #print "T", T

    parents = [
        [i for i, j in E if u == j]
        for u in V
    ]

    kids = [
        [j for i, j in E if u == i]
        for u in V
    ]

    level = np.zeros((len(V),))
    for u in V:
        if u == 0:
            level[u] = 0
        else:
            level[u] = level[parents[u][0]] + 1
    max_level = level[-1]

    TE = list()
    discovered = set([0])
    for i, j in E:
        if j in discovered: continue
        discovered.add(j)
        TE.append((i,j))

    tparents = [
        [i for i, j in TE if u == j]
        for u in V
    ]

    tkids = [
        [j for i, j in TE if u == i]
        for u in V
    ]
    #print 'tree edges', TE
    #print 'tree kids', tkids
    #print 'tree parents', tparents

    #print "kids", kids
    #print "parents", parents
    #print "level", level

    def connected(i, j):
        return (i,j) in E

    def tree_connected(i, j):
        return (i,j) in TE

    def absorbing(v, kids):
        stack = [v]
        seen = set()
        absorbing = list()
        while len(stack) > 0:
            u = stack.pop()
            seen.add(u)
            if u in A:
                absorbing.append(u)
            for kid in kids[u]:
                if kid not in seen:
                    stack.append(kid)
        return absorbing

    def density(v):
        return len(absorbing(v, kids))

    def tree_density(v):
        len(absorbing(v, tkids))
        return len(absorbing(v, tkids))

    def urw(i, j):
        if connected(i, j):
            return 1.0/len(kids[i])
        elif i == j and i in A:
            return 1.0
        else:
            return 0.0

    def unisorb(i, j):
        def weight(v):
            return float(tree_density(v))
        if tree_connected(i, j) and weight(j) > 0:
            return (weight(j) / sum(weight(kid) for kid in tkids[i]))
        elif i == j and len(kids[i]) == 0:
            return 1.0
        else:
            return 0.0

    def fastmax(i, j):
        M = float(max_level)
        def weight(v):
            if v not in A:
                return float(len(kids[v]))/(float(len(parents[v])))
            else:
                return float(level[v])/(M*float(len(parents[v])))
        #if i == j and len(kids[i]) > 0:
            #return 1.0/M
        if connected(i, j) and weight(j) > 0:
            #return ((M - 1.0)/M) * (weight(j) / sum(weight(kid) for kid in kids[i]))
            return (weight(j) / sum(weight(kid) for kid in kids[i]))
        elif i == j and len(kids[i]) == 0:
            return 1.0
        else:
            return 0.0

    #C = np.mean([len(x) for x in kids])
    def musk(i, j):
        def weight(u, v):
            umax = u in A
            vmax = v in A
            udeg = float(len(kids[u]) + len(parents[u]))
            vdeg = float(len(kids[v]) + len(parents[v]))
            if umax and vmax:
                return 0.0
            elif not umax and vmax:
                return 1.0/vdeg
            elif umax and not vmax:
                return 1.0/udeg
            else:
                return 1.0
        if i == j and i in A and level[i] == level[-1]:
            return 1.0
        elif (connected(i, j) or connected(j, i)) and not (i in A and level[i] == level[-1]):
            return (weight(i, j) / sum(weight(i, x)
                                       for x in kids[i] + parents[i]))
        else:
            return 0.0

    return T, A, {
        'urw': urw,
        'unisorb': unisorb,
        'fastmax': fastmax,
        'musk': musk,
    }

def QRN(T, A, pr):
    Q = np.zeros((len(T), len(T)))
    R = np.zeros((len(T), len(A)))
    for i, u in enumerate(T):
        for j, v in enumerate(T):
            Q[i,j] = pr(u,v)
    for i, u in enumerate(T):
        for j, v in enumerate(A):
            R[i,j] = pr(u,v)
    I = np.eye(len(T))
    N = linalg.inv(I - Q)
    return Q, R, N

def stats(T, A, pr):
    Q, R, N = QRN(T, A, pr)
    prs = N.dot(R)[0,:]
    times = N.dot(np.ones((N.shape[0],)))
    expected = 1.0/float(len(prs))
    stderr = round(np.sqrt(sum((p - expected)**2 for p in prs)), 10)
    return {
        'time':times[0],
        'max':max(prs),
        'min':min(prs),
        'stderr':stderr,
        'stddev':np.std(prs*100)
    }

data = list()
for _ in xrange(100):
    T, A, prs = Graph()
    d = {'urw': stats(T, A, prs['urw']), 'fastmax': stats(T, A, prs['fastmax'])}
    data.append(d)
    print d

data = sorted(data, key=lambda x: x['fastmax']['stderr'])

stat_names = sorted(data[0]['urw'].keys())
records = list()
for i, line in enumerate(data):
    for gn, group in line.iteritems():
        row = list()
        row.append(i)
        row.append(gn)
        for sn in stat_names:
            row.append(group[sn])
        records.append(row)

df = pd.DataFrame(records, columns=(['graph', 'chain'] + stat_names))
print df

g = sns.pairplot(df, aspect=3.5,
        hue="chain", x_vars='graph', y_vars=stat_names)
#g = sns.FacetGrid(df, row="stat", hue="chain")
#g = g.map(plt.scatter, "graph", "value")

g.savefig("/tmp/fig.png")


#keys = data[0]['urw'].keys()
#markers = ['o', 'v', '^', 's', 'x', 'd', '+']
#colors = ['r', 'b', 'g']


## print data[0].keys()
## fig = plt.figure()
## for k, m in zip(keys, markers):
##     ys = dict((group, list()) for group in data[0])
##     for i, line in enumerate(data):
##         for group, points in line.iteritems():
##             ys[group].append(points[k])
##     xs = range(len(data))
##     ax = fig.add_subplot(1, 1, 1)
##     for i, group in enumerate(data[0]):
##         print ys[group], colors[i]+m
##         ax.plot(xs, ys[group], colors[i]+'o', label=group)
##     ax.legend()
##     ax.set_title(k)
## plt.show(fig)
## plt.close(fig)


