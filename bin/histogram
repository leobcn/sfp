#!/usr/bin/env python2


import os
import sys
import random
import getopt
import json
import time
random.seed(os.urandom(16))

import numpy as np
from numpy import linalg
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd


def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If
    code is not given it exits with error_codes['usage']'''
    print USAGE
    if code is None:
        print EXTENDED
    else:
        code = 0
    sys.exit(code)

def log(*msgs):
    '''Log a message to the user'''
    for msg in msgs:
        print >>sys.stderr, str(msg),
    print >>sys.stderr
    sys.stderr.flush()

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the abs path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(os.path.expanduser(path))
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(2)
    return path

def load_csv_into(table, f, cols):
    for line in f:
        line = line.strip()
        line = [c.strip() for c in line.split(',', len(cols))]
        data = dict()
        data_name = None
        for name, datum in zip(cols, line):
            try:
                datum = int(datum)
            except:
                try:
                    datum = float(datum)
                except:
                    pass
            if name == 'name':
                data_name = datum
            else:
                data[name] = datum
        if data_name is None:
            continue
        if data_name in table:
            table[data_name].update(data)
        else:
            table[data_name] = data

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "he:p:o:",
            ["help","empirical=",'predicted=',"output=", "retry"])
    except getopt.GetoptError, err:
        log(err)
        usage(1)

    empirical = None
    predicted = None
    output = sys.stdout
    ex = None
    retry = False
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            usage(0)
        elif opt in ('-e', '--empirical',):
            empirical = assert_file_exists(arg)
        elif opt in ('-p', '--predicted',):
            predicted = assert_file_exists(arg)
        elif opt in ('-o', '--output',):
            path = os.path.abspath(arg)
            expath = path + '.ex'
            if os.path.exists(expath) and os.stat(expath).st_size > 0:
                with open(expath) as f:
                    ex = float(f.read())
            elif os.path.exists(path) and os.stat(path).st_size > 0:
                log(path)
                log("cowardly refusing to overwrite output")
                sys.exit(0)
            output = open(path, 'w')
        else:
            log("unexpected option", opt, arg)
            usage(1)

    data_table = dict()

    with open(empirical, 'r') as f:
        load_csv_into(data_table, f, ['count', 'observed probability', 'name'])

    with open(predicted, 'r') as f:
        load_csv_into(data_table, f, ['theoretical probability', 'name'])

    records = list()
    for name, data in data_table.iteritems():
        record = {"name":name}
        record.update(data)
        records.append(record)

    prs = ['observed probability', 'theoretical probability']
    df = pd.DataFrame(records, columns=(['count', 'observed probability', 'theoretical probability']))
    print df['observed probability'].tolist()

    g = sns.distplot(df['observed probability'], kde=False).figure
    g.savefig("/tmp/observed.png")
    plt.close()

    g = sns.distplot(df['theoretical probability'], kde=False).figure
    g.savefig("/tmp/theoretical.png")
    plt.close()



if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
